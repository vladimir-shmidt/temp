# Обновление системы 25.10.2023


## Версия оператора
Необходимо обновить версию оператора до ext-registry.sfera.ru.net/library/operator/image:1.64.7-gpn-17


## Обновление бэкенда Сфера.Задачи
В ppts.yaml необходимо обновить сервис tasks до версии **2231-feature-1.8gpn2**


## Добавление аудита в Сфера.Знания
В конце файла добавить блок нового сервиса-сайдкара для аудита:

local_audit_adapter:`
  `enabled: true`
  `image:`
    `repository: ext-registry.sfera.ru.net/ppch-docker-pub/sfera-local-audit-adapter`
    `tag: 23-release-1.3.1`

Для корректности работы аудита необходимо произвести донастройку keycloack, добавить маппер. Для этого авторизуемся в админ-панели Keycloak, переходим в realm sfera-services —> Clients —>  channel —>  clients scopes —>  channel dedicated —>  add mapper by configuration —>  hardcoded claim —>  name:channel, claim name: channel, value: internal, enable add to access token, add to access token response

## Перенос переменных окружения в секреты

Основной вспомогательный компонент текущего развертывания - оператор, построен на стандартном operator-sdk с helm-plugin-ом. Предоставляемые манифесты (ppts/ppwi/etc) представляют собой дополнительный уровень абстракции для совместной упаковки нескольких сервисов в зафиксированном состоянии. В самом операторе они представляют собой обычные хельм-чарты с их стандартным функционалом. Посмотреть структуру можно перейдя в контейнер оператора.  

В настоящее время в операторе есть функционал поддержки монтирования внешних секретов, при этом реализовать можно все то же самое, что позволяет сделать helm. В качестве примера создадим секрет:

```
kubectl create secret generic testsecret --from-literal auth=test
```

И пропишем его в сервисе канального приложения (ppc.yaml). Было:
```
auth:
  image:
    repository: ext-registry.sfera.ru.net/ppch-docker-snapshot/sfera-auth-service
    tag: 106-release-1.3.0
```
Стало: 
`auth:`
  `image:`
    `repository: ext-registry.sfera.ru.net/ppch-docker-snapshot/sfera-auth-service`
    `tag: 106-release-1.3.0`
  `payload:`
    `envSecrets:`
      `testsecret:`
        `- auth`

 В результате данных действий в сервисе появится переменная auth с значением из секрета  testsecret


## Настройка безопасного подключения к LDAPS

Настройку безопасного подключения к ldaps проведем на трех сервисах, использующих подключение к каталогу:  keyloack, ppts-tasks-users, sfera-wiki-access
Главное и ключевое условие для успешного подключения, необходимо положить корневые сертификаты сервера в подключаемое к сервисам хранилище доверенных сертификатов. Инструкция-пример создания подобного хранилища расположено в основой инструкции

#### Keyloack

В  ppch.yaml  секции keycloak добавляем блок
      `payload:`
        `volumes:`
          `- hostPath:`
              `path: /opt/ca.cacerts`
              `type: File`
            `name: cacerts`
          `- hostPath:`
              `path: /opt/ca`
              `type: Directory`
            `name: ca`
        `volumeMounts:`
          `- mountPath: /opt/ca.cacerts`
            `name: cacerts`
          `- mountPath: /opt/ca`
            `name: ca`

Где 
* /opt/ca.cacerts - хранилище доверенных корневых сертификатов в формате jks
* /opt/ca - директория с корневыми сертификатами

Далее необходимо добавить следующие переменные окружения:
```
env: 
  KC_SPI_TRUSTSTORE_FILE_FILE: /opt/ca.cacerts
  KC_SPI_TRUSTSTORE_FILE_PASSWORD: changeit
  JAVA_OPTS_APPEND: "-Djavax.net.ssl.trustStore=/opt/ca.cacerts -Djavax.net.ssl.trustStorePassword=changeit -Xms4096m -Xmx4096m"
  X509_CA_BUNDLE: "/opt/ca/Root_CA.crt /opt/ca/Dev_Issuing_CA_1.crt"
```



#### ppts-tasks-users

Ничего делать дополнительно не нужно, хранилище уже должно быть смонтировано, необходимо проверить это и перенастроить строку подключения к службам каталога

#### sfera-wiki-access

В манифесте ppwi.yaml прописываем аналогичный блок из ppts.yaml
```
trustStore:
  hostPath: /opt/cacerts
  password: changeit
```
 
Где /opt/cacerts - ранее сгенерированное хранилище доверенных сертификатов

 

## Использование безопасного (TLS) подключения к Kafka

Общий принцип использования безопасного подключения остается тот же. Создаем truststore и keystore хранилища, монтируем их в сервисы
Для упрощения можно использовать общие подключаемые в каждый сервис хранилища, пример манифеста:
trustStore:
  *hostPath: /opt/cacerts
    password: changeit*
keyStore: 
  hostPath: /opt/keystores
  password: changeit*

Далее меняем параметры в блоке переменных окружения.  В качестве примера рассмотрим 2 сервиса: tasks-tasks и wiki-pages

### tasks-tasks

env:
  TASKS_KAFKA_SECURITY_PROTOCOL: SSL
  TASKS_KAFKA_SSL_TRUSTSTORE_TYPE: JKS
  SFERA_TASKS_TRUSTED_CERTIFICATES: /opt/cacerts
  SFERA_TASKS_TRUSTED_CERTIFICATES_PASSWORD: changeit
  TASKS_KAFKA_SSL_KEYSTORE_TYPE: JKS
  SFERA_TASKS_KAFKA_KEYSTORE: /opt/keystores
  SFERA_TASKS_KAFKA_KEYSTORE_PASSWORD: changeit


### wiki-pages

env:
  SEARCH_INT_KEY_STORE_LOCATION: "file:///opt/keystores"
   SEARCH_INT_KEY_PASSWORD: "changeit"
   SEARCH_INT_KEY_STORE_PASSWORD: "changeit"
   SEARCH_INT_TRUST_STORE_LOCATION: "file:///opt/cacerts"
   SEARCH_INT_TRUST_STORE_PASSWORD: "changeit"
